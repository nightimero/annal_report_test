# -*- coding:utf-8 -*-

# 列表解析就是鲜明的Pythonic。我常遇到两个使用列表解析的问题，本应归属于最佳实践，
# 但这两个问题非常典型，所以不妨在这里提一下：
#
# 第一个问题是，因为对元素应用的动作太复杂，不能用一个表达式写出来，所以不使用列表解析。
# 这是典型的思想没有转变的例子，如果我们将动作封装成函数，那不就是一个表达式了么？
#
# 第二个问题是，因为if子句里的条件需要计算，同时结果也需要进行同样的计算，不希望计算两遍，就像这样：

lst = []


(x.doSomething() for x in lst if x.doSomething() > 0)
# 这样写确实很糟糕，但组合一下列表解析即可解决：


(x for x in (y.doSomething() for y in lst) if x > 0)
# 内部的列表解析变量其实也可以用x，但为清晰起见我们改成了y。或者更清楚的，可以写成两个表达式：

tmp = (x.doSomething() for x in lst)
(x for x in tmp if x > 0)
# 列表解析可以替代绝大多数需要用到map和filter的场合，可能正因为此，
# 著名的静态检查工具pylint将map和filter的使用列为了警告。
